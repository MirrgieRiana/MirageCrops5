buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "0.0.1"
group= "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "modid"

minecraft {
    version = "1.7.10-10.13.2.1230"
    runDir = "eclipse"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}









def fromSourceSet(target, output = false)
{
    return [
        output: output,
        target: target,
        runner: { packageName ->

	        println packageName + "  depends on  " + target

	        tasks["compile" + packageName.capitalize() + "Java"].dependsOn tasks[target + "Classes"]

	        dependencies.add packageName + "Compile", files(
	            sourceSets[target].output.classesDir,
	            sourceSets[target].output.resourcesDir)

	    },
    ]
}

def fromForge(output = false)
{
    return [
        output: output,
        target: "",
        runner: { packageName ->
	        println packageName + "  depends on  " + "MinecraftForge"
	        configurations[packageName + "Compile"].extendsFrom configurations.compile
        },
    ]
}

def fromString(string, output = false)
{
    return [
        output: output,
        target: "",
        runner: { packageName ->
	        println packageName + "  depends on  " + string
	        dependencies.add packageName + "Compile", string
	    },
    ]
}

// パッケージと依存関係の定義
// 依存関係は再帰する
@groovy.transform.Field
def packageDependancy = [

    "mirrg_p": [
        fromString('junit:junit:4.11'),
    ],

    "mirrg_mir50_block": [
        fromForge(true),
        fromSourceSet("mirrg_p", true),
    ],

    "mirrg_mir50_block_multi": [
        fromSourceSet("mirrg_mir50_block", true),
    ],

    "mirrg_mir50_render_block": [
        fromForge(true),
    ],

    "mirrg_mir51_render_block_multiple": [
        fromSourceSet("mirrg_mir50_block", true),
        fromSourceSet("mirrg_mir50_loaders"),
        fromSourceSet("mirrg_mir50_render_block"),
    ],

    "mirrg_mir51_render_block_multiple_multi": [
        fromSourceSet("mirrg_mir51_render_block_multiple", true),
        fromSourceSet("mirrg_mir50_block_multi", true),
    ],

    /////////////////////////////////////////////////////

    "mirrg_mir50_item": [
        fromForge(true),
        fromSourceSet("mirrg_p", true),
    ],

    "mirrg_mir50_item_multi": [
        fromSourceSet("mirrg_mir50_item", true),
    ],

    /////////////////////////////////////////////////////

    "api_mirrg_mir50_loader": [
    ],

    "mirrg_mir50_loader": [
        fromSourceSet("api_mirrg_mir50_loader", true),
    ],

    "api_mirrg_mir50_worldgen": [
        fromForge(true),
    ],

    "mirrg_mir50_loaders": [
        fromForge(),
        fromSourceSet("api_mirrg_mir50_worldgen", true),
        fromSourceSet("mirrg_mir50_loader", true),
    ],

    "mirrg_mir50_modding": [
        fromForge(true),
        fromSourceSet("mirrg_mir50_loader", true),
    ],

    "mirrg_mir40_math": [
    ],

    "mirrg_mir50_worldgen_ore": [
        fromSourceSet("mirrg_mir40_math"),
        fromSourceSet("api_mirrg_mir50_worldgen", true),
    ],

    /////////////////////////////////////////////////////

    "mirrg_mir52_example": [
        fromSourceSet("mirrg_mir50_modding"),
        fromSourceSet("mirrg_mir50_loaders"),
        fromSourceSet("mirrg_mir50_block"),
        fromSourceSet("mirrg_mir51_render_block_multiple"),
        fromSourceSet("mirrg_mir50_item_multi"),
    ],
    "mirrg_miragecrops5": [
        fromSourceSet("mirrg_mir50_modding"),
        fromSourceSet("mirrg_mir50_loaders"),
        fromSourceSet("mirrg_mir51_render_block_multiple_multi"),
        fromSourceSet("mirrg_mir50_item_multi"),
        fromSourceSet("mirrg_mir40_math"),
        fromSourceSet("mirrg_mir50_worldgen_ore"),
    ],

]







// パッケージ一覧
def packages = packageDependancy.keySet()

// ソースセット製造
packages.each {
    sourceSets.create it
}

// エンコーディング指定
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks["compile" + "api".capitalize() + "Java"].options.encoding = 'UTF-8'
packages.each {
    tasks["compile" + it.capitalize() + "Java"].options.encoding = 'UTF-8'
}

// 準拠指定
sourceCompatibility = targetCompatibility = '1.8'

// compileJavaコマンドのタスクに指定
compileJava.dependsOn tasks["api" + "Classes"]
packages.each {
    compileJava.dependsOn tasks[it+ "Classes"]
}

// 梱包に指定
jar.from sourceSets["api"].output.classesDir
jar.from sourceSets["api"].output.resourcesDir
packages.each {
	jar.from sourceSets[it].output.classesDir
	jar.from sourceSets[it].output.resourcesDir
}

def getDependancy(packageName) {
    def res = []

    def add
    add = { it, firstLayer ->
        def list = packageDependancy[it]
	    list.each {
	        if (!res.contains(it)) {
	            if (firstLayer || it.output) {
		            res.add it
		            add it.target, false
		        }
	        }
	    }
    }

    add packageName, true

    return res
}

// パッケージ依存関係の定義
packages.each { packageName ->
    getDependancy(packageName).each { depencancy ->
        depencancy.runner(packageName)
    }
}
